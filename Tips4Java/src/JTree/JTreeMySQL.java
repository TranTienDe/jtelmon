/*
 * blog.kazao.net/2008/07/using-jtree-to-list-databases-tables.html
 * 
 */

package JTree;

import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;

/**
 *
 * @author  Mr. Kazao
 */
public class JTreeMySQL extends javax.swing.JFrame {

    private Connection conn;
    private ImageIcon iconDatabase = new ImageIcon(getClass().getResource("database.png"));
    private ImageIcon iconTable = new ImageIcon(getClass().getResource("table.png"));
    private ImageIcon iconField = new ImageIcon(getClass().getResource("field.png"));

    /** Creates new form JTreeMySQL */
    public JTreeMySQL() {
        initComponents();
        String host = "localhost";
        int port = 3306;
        String user = "root";
        String pass = "";
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(user + "@" + host + ":" + port);
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
            System.exit(0);
        } catch (InstantiationException ex) {
            ex.printStackTrace();
            System.exit(0);
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
            System.exit(0);
        }
        try {
            conn = DriverManager.getConnection("jdbc:mysql://" + host + ":" + port + "/mysql", user, pass);
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.exit(0);
        }
        try {
            Statement sDatabase = conn.createStatement();
            ResultSet rsDatabase = sDatabase.executeQuery("SHOW DATABASES");
            rsDatabase.beforeFirst();
            while (rsDatabase.next()) {
                DefaultMutableTreeNode nodeDatabase = new DefaultMutableTreeNode(rsDatabase.getString("Database"));
                root.add(nodeDatabase);
                Statement sTable = conn.createStatement();
                ResultSet rsTable = sTable.executeQuery("SHOW TABLES FROM `" + rsDatabase.getString("Database") + "`");
                rsTable.beforeFirst();
                while (rsTable.next()) {
                    DefaultMutableTreeNode nodeTable = new DefaultMutableTreeNode(rsTable.getString("Tables_in_" + rsDatabase.getString("Database")));
                    nodeDatabase.add(nodeTable);
                    Statement sField = conn.createStatement();
                    ResultSet rsField = sField.executeQuery("SHOW FIELDS FROM `" + rsDatabase.getString("Database") + "`.`" + rsTable.getString("Tables_in_" + rsDatabase.getString("Database")) + "`");
                    rsField.beforeFirst();
                    while (rsField.next()) {
                        DefaultMutableTreeNode nodeField = new DefaultMutableTreeNode(rsField.getString("Field") + " - " + rsField.getString("Type"));
                        nodeTable.add(nodeField);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.exit(0);
        }
        tree.setModel(new DefaultTreeModel(root));
        tree.setCellRenderer(new TreeCellRenderer() {

            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                JLabel label = new JLabel(value.toString());
                if (tree.getPathForRow(row).getPathCount() == 2) {
                    label.setIcon(iconDatabase);
                } else if (tree.getPathForRow(row).getPathCount() == 3) {
                    label.setIcon(iconTable);
                } else if (tree.getPathForRow(row).getPathCount() == 4) {
                    label.setIcon(iconField);
                }
                if (selected) {
                    label.setOpaque(true);
                    label.setBackground(tree.getBackground().darker());
                }
                if (hasFocus) {
                    label.setBorder(BorderFactory.createLineBorder(Color.RED));
                }
                return label;
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // //GEN-BEGIN:initComponents
    private void initComponents() {

        scroller = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JTree & MySQL");

        scroller.setName("scroller"); // NOI18N

        tree.setName("tree"); // NOI18N
        scroller.setViewportView(tree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroller, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroller, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// //GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JTreeMySQL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JScrollPane scroller;
    public javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
}
